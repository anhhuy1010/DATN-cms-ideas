package database

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"github.com/anhhuy1010/DATN-cms-ideas/config"
)

var (
	db     *mongo.Database
	client *mongo.Client
)

// Init connects to MongoDB and returns the database instance.
func Init() (*mongo.Database, error) {
	if db != nil {
		return db, nil
	}

	cfg := config.GetConfig()

	// ƒê·ªçc th√¥ng tin t·ª´ config
	user := url.QueryEscape(cfg.GetString("database.username"))
	password := url.QueryEscape(cfg.GetString("database.password"))
	host := cfg.GetString("database.host")
	dbName := cfg.GetString("database.db_name")
	ssl := cfg.GetBool("database.ssl")

	// X√¢y d·ª±ng URI MongoDB Atlas
	var uri string
	if ssl {
		// D√πng SRV URI n·∫øu d√πng MongoDB Atlas (SSL b·∫Øt bu·ªôc)
		uri = fmt.Sprintf("mongodb+srv://%s:%s@%s/?retryWrites=true&w=majority", user, password, host)
	} else {
		// (Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát n·∫øu d√πng cluster th∆∞·ªùng kh√¥ng c√≥ SRV)
		log.Fatal("‚ùå MongoDB Atlas y√™u c·∫ßu SSL. Vui l√≤ng b·∫≠t 'ssl: true' trong config.")
	}

	log.Printf("üîó ƒêang k·∫øt n·ªëi MongoDB Atlas t·∫°i host: %s (DB: %s)", host, dbName)

	// Thi·∫øt l·∫≠p timeout cho k·∫øt n·ªëi
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// T·∫°o client v·ªõi URI
	clientOptions := options.Client().ApplyURI(uri)

	var err error
	client, err = mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Fatalf("‚ùå K·∫øt n·ªëi MongoDB th·∫•t b·∫°i: %v", err)
		return nil, err
	}

	// Ping ki·ªÉm tra k·∫øt n·ªëi
	if err := client.Ping(ctx, nil); err != nil {
		log.Fatalf("‚ùå Ping MongoDB th·∫•t b·∫°i: %v", err)
		return nil, err
	}

	// G√°n database v√† tr·∫£ v·ªÅ
	db = client.Database(dbName)
	log.Println("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng.")
	return db, nil
}

// GetInstance tr·∫£ v·ªÅ instance ƒëang k·∫øt n·ªëi
func GetInstance() *mongo.Database {
	if db == nil {
		log.Fatal("‚ùå MongoDB ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. G·ªçi Init() tr∆∞·ªõc.")
	}
	return db
}

// Disconnect ƒë√≥ng k·∫øt n·ªëi MongoDB
func Disconnect() {
	if client != nil {
		if err := client.Disconnect(context.Background()); err != nil {
			log.Println("‚ö†Ô∏è Kh√¥ng th·ªÉ ng·∫Øt k·∫øt n·ªëi MongoDB:", err)
		} else {
			log.Println("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB.")
		}
	}
}
